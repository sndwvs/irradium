# Description: elogind - extracted logind from systemd
# URL: https://github.com/elogind/elogind
# Maintainer: mara, mara at fail dot pp dot ua
# Depends on: meson ninja python3-jinja2 intltool libseccomp linux-pam glib acl libcap eudev gettext

name=elogind
version=255.5
release=1
source=(https://github.com/$name/$name/archive/v${version}/$name-$version.tar.gz
	10-enable-elogind-power.rules
	11-prefer-deep-suspend.patch
	12-default-deep-suspend.patch
	elogind.nobody.nogroup.99.99.diff
	rc.elogind)

build() {

	# Once upon a time we were encouraged to go against long-standing UNIX
	# traditions and use 99:99 for nobody:nogroup.
	# This may have been a bad idea.
	# But since to change this we'll have to dig through the system and make
	# sure that nothing hardcodes 99:99, we'll leave it as-is for now.
	# It's more than likely on the TODO list to change these back to
	# 65534:65534, however.
	# Meanwhile we'll at least change this from a sed to a patch.
	# Always hated sed in these situations because the underlying code can change
	# but sed will still happily scribble all over everything.
	cat $SRC/elogind.nobody.nogroup.99.99.diff | patch -p1 --verbose -d $name-$version || exit 1

	# OK, here's the scoop on s2idle. After doing some digging, it looks like both
	# Intel and AMD have stopped officially supporting S3 sleep (aka "deep") with
	# the latest generation of CPUs (although it "might work"). I've also seen a
	# few people say that S3 is "not secure"... which if you're worried that a
	# three letter agency might grab your sleeping laptop and extract the contents
	# of the RAM while keeping it powered up, well, maybe in that sense it isn't.
	# As far as s2idle, I have heard that it has the potential to be as much of a
	# low power mode as deep, but that depends on how low the IRQ rate gets. In
	# practice I have heard of s2idle draining a battery in half a day.
	#
	# Anyway, I tried s2deep here again (with the below sleep patches) and it still
	# locks up my machine (a fairly recent Thinkpad X1).
	#
	# S3 works and has the best power savings of all the partially-on modes.
	# Feel free to edit /etc/elogind/sleep.conf.d/10-elogind.conf if s2deep works
	# for you, but we'll continue to default to deep for now.
	#
	# Don't prefer s2idle, as it doesn't seem to work:
	cat $SRC/11-prefer-deep-suspend.patch | patch -p1 -d $name-$version --verbose || exit 1
	cat $SRC/12-default-deep-suspend.patch | patch -p1 -d $name-$version --verbose || exit 1

	meson setup $name-$version build \
		--buildtype=release \
		--prefix=/usr \
		--libdir=/lib \
		--libexecdir=/lib/$name \
		-D pkgconfiglibdir=/usr/lib/pkgconfig \
		-D pamlibdir=/lib/security \
		-D udevrulesdir="/lib/udev/rules.d" \
		-D mandir="/usr/share/man" \
		-D man=enabled \
		-D html=disabled \
		-D bashcompletiondir="/usr/share/bash-completion/completions" \
		-D nobody-user=nobody \
		-D nobody-group=nogroup \
		-D pam=enabled \
		-D pamlibdir="/lib/security" \
		-D pamconfdir="/etc/pam.d" \
		-D acl=enabled \
		-D smack=false \
		-D utmp=true \
		-D default-hierarchy=legacy \
		-D cgroup-controller=elogind \
		-D halt-path=/sbin/halt \
		-D poweroff-path=/sbin/poweroff \
		-D reboot-path=/sbin/reboot \
		-D default-kill-user-processes=false \
		-D mode=release \

	ninja -C build

	DESTDIR=$PKG ninja -C build install

	# Create symlinks for elogind binaries to /bin/:
	mkdir -p $PKG/bin
	ln -sf /usr/bin/elogind-inhibit $PKG/bin/elogind-inhibit
	ln -sf /usr/bin/loginctl $PKG/bin/loginctl

	# Create supported dirs in /etc/elogind/ (local config)
	mkdir -p $PKG/etc/elogind/logind.conf.d/ $PKG/etc/elogind/sleep.conf.d/

	# Add login1 policy file that allows users in the 'power' group
	# to shutdown/reboot the computer:
	mkdir -p $PKG/usr/share/polkit-1/rules.d
	cat $CWD/10-enable-elogind-power.rules > $PKG/usr/share/polkit-1/rules.d/10-enable-session-power.rules

	# We don't need the hidden files to make inferior package managers keep dirs:
	find $PKG -type f -name ".keep_dir" -exec rm -f {} \;

	# Add start/stop script
	install -Dm0755 rc.elogind $PKG/etc/rc.d/elogind

	rm -rf $PKG/usr/share/{bash-completion,doc,locale,zsh}
}
